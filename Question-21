#include <iostream>
#include <cmath>
using namespace std;

class Shape {
public:
    virtual double area() = 0;
};

class Circle : public Shape {
    double radius;
public:
    Circle(double r) : radius(r) {}
    double area() override {
        return M_PI * radius * radius;
    }
};

class Square : public Shape {
    double side;
public:
    Square(double s) : side(s) {}
    double area() override {
        return side * side;
    }
};

class Base {
public:
    virtual ~Base() {
        cout << "Base destructor" << endl;
    }
};

class Derived : public Base {
public:
    ~Derived() {
        cout << "Derived destructor" << endl;
    }
};

int main() {
    Shape* s1 = new Circle(5);
    Shape* s2 = new Square(4);

    cout << "Circle Area: " << s1->area() << endl;
    cout << "Square Area: " << s2->area() << endl;

    delete s1;
    delete s2;

    Base* ptr = new Derived();
    delete ptr;

    return 0;
}
